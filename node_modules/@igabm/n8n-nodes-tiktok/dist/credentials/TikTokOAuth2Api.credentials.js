"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TikTokOAuth2Api = void 0;
async function fetchUserInfo(http, accessToken) {
    var _a, _b;
    const resp = await http.helpers.httpRequest({
        method: 'GET',
        url: 'https://open.tiktokapis.com/v2/user/info/',
        qs: { fields: 'open_id,username,display_name,avatar_url' },
        headers: { Authorization: `Bearer ${accessToken}` },
    });
    const u = (_b = (_a = resp === null || resp === void 0 ? void 0 : resp.data) === null || _a === void 0 ? void 0 : _a.user) !== null && _b !== void 0 ? _b : {};
    return {
        open_id: u.open_id,
        username: u.username,
        display_name: u.display_name,
        avatar_url: u.avatar_url,
    };
}
class TikTokOAuth2Api {
    constructor() {
        this.name = 'tiktokOAuth2Api';
        this.extends = ['oAuth2Api'];
        this.displayName = 'TikTok OAuth2 API';
        this.documentationUrl = 'https://developers.tiktok.com/doc/oauth-user-access-token-management';
        this.icon = {
            light: 'file:icons/TikTok.svg',
            dark: 'file:icons/TikTok.dark.svg',
        };
        this.properties = [
            {
                displayName: 'Authorization URL',
                name: 'authUrl',
                type: 'hidden',
                default: 'https://www.tiktok.com/v2/auth/authorize/',
            },
            {
                displayName: 'Authentication',
                name: 'authentication',
                type: 'hidden',
                default: 'body',
            },
            {
                displayName: 'Access Token URL',
                name: 'accessTokenUrl',
                type: 'hidden',
                default: 'https://open.tiktokapis.com/v2/oauth/token/',
            },
            {
                displayName: 'Grant Type',
                name: 'grantType',
                type: 'hidden',
                default: 'authorizationCode',
            },
            {
                displayName: 'Client Key',
                name: 'clientId',
                type: 'string',
                typeOptions: { password: true },
                required: true,
                default: '',
                description: 'TikTok Client Key (client_key).',
            },
            {
                displayName: 'Client Secret',
                name: 'clientSecret',
                type: 'string',
                typeOptions: { password: true },
                required: true,
                default: '',
                description: 'TikTok Client Secret.',
            },
            {
                displayName: 'Scope',
                name: 'scope',
                type: 'string',
                default: 'video.upload,video.publish,user.info.basic,user.info.profile,user.info.stats',
                description: 'Comma-separated scopes.',
            },
            {
                displayName: 'Auth URI Query Parameters',
                name: 'authQueryParameters',
                type: 'hidden',
                default: '={{"response_type=code&client_key="+encodeURIComponent($self["clientId"])}}',
            },
            {
                displayName: 'Expected State Token (optional)',
                name: 'expectedStateToken',
                typeOptions: { password: true },
                type: 'string',
                default: '',
            },
            {
                displayName: 'Expected State CID (optional)',
                name: 'expectedStateCid',
                type: 'string',
                default: '',
            },
            {
                displayName: 'Require State',
                name: 'stateRequired',
                type: 'boolean',
                default: true,
            },
            {
                displayName: 'Max State Age (minutes)',
                name: 'stateMaxAgeMinutes',
                type: 'number',
                default: 10,
            },
            {
                displayName: 'Auth Body Extras',
                name: 'additionalBodyProperties',
                type: 'hidden',
                default: '={{JSON.stringify({ client_key: $self["clientId"] })}}',
            },
        ];
        this.authenticate = {
            type: 'generic',
            properties: {
                headers: {
                    Authorization: '=Bearer {{$credentials.oauthTokenData.access_token}}',
                },
            },
        };
        this.test = {
            request: {
                baseURL: 'https://open.tiktokapis.com',
                url: '/v2/user/info/?fields=open_id,username,display_name',
            },
        };
    }
    async preAuthentication(credentials) {
        var _a, _b;
        const url = 'https://open.tiktokapis.com/v2/oauth/token/';
        const oauthData = credentials.oauthTokenData;
        if (oauthData === null || oauthData === void 0 ? void 0 : oauthData.refresh_token) {
            const resp = (await this.helpers.httpRequest({
                method: 'POST',
                url,
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: new URLSearchParams({
                    client_key: credentials.clientId,
                    client_secret: credentials.clientSecret,
                    grant_type: 'refresh_token',
                    refresh_token: oauthData.refresh_token,
                }).toString(),
            }));
            const user = (_a = oauthData.user) !== null && _a !== void 0 ? _a : (await fetchUserInfo(this, resp.access_token).catch(() => undefined));
            return {
                oauthTokenData: {
                    access_token: resp.access_token,
                    refresh_token: (_b = resp.refresh_token) !== null && _b !== void 0 ? _b : oauthData.refresh_token,
                    expires_in: resp.expires_in,
                    token_type: resp.token_type || 'Bearer',
                    scope: resp.scope,
                    open_id: resp.open_id,
                    refresh_expires_in: resp.refresh_expires_in,
                    user,
                },
            };
        }
        return {};
    }
}
exports.TikTokOAuth2Api = TikTokOAuth2Api;
//# sourceMappingURL=TikTokOAuth2Api.credentials.js.map